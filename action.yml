name: 'Terraform Template Composite Action'
description: 'Terraform Template Composite Action'

inputs:
  AWS_ACCESS_KEY_ID:
    description: 'AWS Access Key ID'
    required: true
  AWS_REGION:
    description: 'AWS Region'
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: 'AWS Secret Access Key'
    required: true
  DATABRICKS_ACCOUNT_ID:
    description: 'Databricks Account ID'
    required: true
  DATABRICKS_ADMIN_LOGIN:
    description: 'Databricks Admin Login'
    required: true
  DATABRICKS_ADMIN_PASSWORD:
    description: 'Databricks Admin Password'
    required: true
  DATABRICKS_CLIENT_ID_DEV:
    description: 'Databricks Client ID Dev'
    required: true
  DATABRICKS_CLIENT_ID_PROD:
    description: 'Databricks Client ID Prod'
    required: true
  DATABRICKS_CLIENT_ID_SECRET_DEV:
    description: 'Databricks Client ID Secret Dev'
    required: true
  DATABRICKS_CLIENT_ID_SECRET_PROD:
    description: 'Databricks Client ID Secret Prod'
    required: true
  DATABRICKS_INSTANCE_DEV:
    description: 'Databricks Instance Dev'
    required: true
  DATABRICKS_INSTANCE_PROD:
    description: 'Databricks Instance Prod'
    required: true
  ENVIRONMENT:
    description: 'Environment'
    required: true
  GH_TOKEN:
    description: 'Github Token'
    required: true

runs:
  using: "composite"

  steps:
  
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        token: ${{ inputs.GH_TOKEN }}


    - name: Set all Terraform environment variables passed in from Terraform Config Repo
      run: |
        TF_VAR_environment: ${{ inputs.ENVIRONMENT  }}
        TF_VAR_aws_region: ${{ inputs.AWS_REGION }}
        TF_VAR_aws_access_key_id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_access_key_secret: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_databricks_account_id: ${{ inputs.DATABRICKS_ACCOUNT_ID }}
        TF_VAR_databricks_instances: '{"dev": "${{ inputs.DATABRICKS_INSTANCE_DEV }}", "prod": "${{ inputs.DATABRICKS_INSTANCE_PROD }}"}'
        TF_VAR_databricks_client_ids: '{"dev": "${{ inputs.DATABRICKS_CLIENT_ID_DEV }}", "prod": "${{ inputs.DATABRICKS_CLIENT_ID_PROD }}"}'
        TF_VAR_databricks_client_secrets: '{"dev": "${{ inputs.DATABRICKS_CLIENT_ID_SECRET_DEV }}", "prod": "${{ inputs.DATABRICKS_CLIENT_ID_SECRET_PROD }}"}'
        TF_VAR_databricks_admin_login: ${{ inputs.DATABRICKS_ADMIN_LOGIN }}
        TF_VAR_databricks_admin_password: ${{ inputs.DATABRICKS_ADMIN_PASSWORD }}
        TF_VAR_github_actor: ${{ github.actor }} # username for tagging of resources


      - name: Set up latest version of Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'


      - name: Install jq
        run: sudo apt-get install jq


      - name: Create Terraform Init Backend Configuration
        run: |
          BACKEND_BUCKET_DEV=$(jq -r .backend_bucket_dev < ../terraform/shell_scripts/tf_s3_backend/tf_s3_backend_config.json)
          BACKEND_BUCKET_PROD=$(jq -r .backend_bucket_prod < ../terraform/shell_scripts/tf_s3_backend/tf_s3_backend_config.json)
          echo "BACKEND_BUCKET_DEV=$BACKEND_BUCKET_DEV" >> $GITHUB_ENV
          echo "BACKEND_BUCKET_PROD=$BACKEND_BUCKET_PROD" >> $GITHUB_ENV


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1


      - name: Setup Terraform Init Backend
        run: |
          export TF_LOG=DEBUG
          if [[ "${{ env.TF_VAR_environment }}" == "dev" ]]; then
            export BUCKET_NAME="${{ env.BACKEND_BUCKET_DEV }}"
          else
            export BUCKET_NAME="${{ env.BACKEND_BUCKET_PROD }}"
          fi
          export KEY_NAME="terraform/terraform.tfstate"
          export AWS_REGION="${{ env.TF_VAR_aws_region }}"
          export ACCESS_KEY="${{ env.TF_VAR_aws_access_key_id }}"
          export SECRET_KEY="${{ env.TF_VAR_aws_access_key_secret}}"
          chmod +x ../terraform/shell_scripts/tf_s3_backend/tf_s3_backend_deploy.sh
          ../terraform/shell_scripts/tf_s3_backend/tf_s3_backend_deploy.sh


      - name: Get Databricks Authentication Token
        run: |
          export DATABRICKS_ACCOUNT_ID="${{ env.TF_VAR_databricks_account_id }}"
          export DATABRICKS_CLIENT_ID=$(echo $TF_VAR_databricks_client_ids | jq -r .${{env.TF_VAR_environment}})
          export DATABRICKS_CLIENT_SECRET=$(echo $TF_VAR_databricks_client_secrets | jq -r .${{env.TF_VAR_environment}})
          pip3 install -r ../terraform/python/requirements.txt
          chmod +x ../terraform/python/get_dbricks_token.py
          TF_VAR_databricks_token=$(python3 ../terraform/python/get_dbricks_token.py)
          echo "TF_VAR_databricks_token=$TF_VAR_databricks_token" >> $GITHUB_ENV
          echo "TF_VAR_databricks_token: $TF_VAR_databricks_token"


    - name: Clone down the Terraform Template Config Repo with the tf_issue_submission.json
      shell: bash
      run: |
        git clone https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}_config.git


    - name: Get Terraform Submission Json Request
      run: |
        TF_VAR_databricks_submission_json=$(jq -c . < ./${{ github.event.repository.name }}_config/issue_submission/tf_issue_submission.json)
        echo "TF_VAR_databricks_submission_json=$TF_VAR_databricks_submission_json" >> $GITHUB_ENV


    - name: Terraform Validate
      run: |
        export TF_LOG=DEBUG
        terraform validate


    - name: Terraform Plan
      run: terraform plan


    - name: Terraform Apply
      run: terraform apply
